<?xml version="1.0" encoding="UTF-8"?>
<project name="Jolie" default="build">
    <property name="dist" value="dist"/>
    <property name="dist.jolie" value="dist/jolie"/>
    <property name="dist.launchers" value="${dist}/launchers"/>
    <property name="dist.launchers.windows" value="${dist.launchers}/windows"/>
    <property name="dist.launchers.unix" value="${dist.launchers}/unix"/>

	<condition property="isWindows" value="true">
		<os family="windows" />
	</condition>

	<condition property="isBaseDirSet" value="true">
		<isset property="install.basedir"/>
	</condition>

	<target name="-load-property-files">
		<property name="config.dir" value="buildconfig"/>
		<property file="${config.dir}/build.properties"/>
		<property file="${config.dir}/config.properties"/>
	</target>

	<target name="-init" depends="-load-property-files,-create-install-properties-with-basedir,-create-install-properties-without-basedir"/>

	<target name="-create-install-properties-with-basedir" if="isBaseDirSet">
		<property name="private.install.dir" value="${install.basedir}/${install.dir}"/>
		<property name="private.install.launcher_dir" value="${install.basedir}/${install.launcher_dir}"/>
	</target>

	<target name="-create-install-properties-without-basedir" unless="isBaseDirSet">
		<property name="private.install.dir" value="${install.dir}"/>
		<property name="private.install.launcher_dir" value="${install.launcher_dir}"/>
	</target>

	<target name="-delete-old-dir" if="${install.delete_old_dir}">
		<delete dir="${private.install.dir}"/>
	</target>

	<target name="-install-windows-launchers" if="isWindows">
		<echo message="Installing Jolie Windows launcher scripts to ${private.install.launcher_dir} ..." />
		<copy todir="${private.install.launcher_dir}" overwrite="true">
			<fileset dir="${dist.launchers.windows}"/>
		</copy>
    </target>

    <target name="-create-windows-launchers">
		<echo message="Creating Jolie Windows launcher script..." />
		<echo file="${dist.launchers.windows}/jolie.bat">@echo off
java -ea:jolie... -ea:joliex... -jar %JOLIE_HOME%\jolie.jar -l .\lib\*;%JOLIE_HOME%\lib;%JOLIE_HOME%\javaServices\*;%JOLIE_HOME%\extensions\* -i %JOLIE_HOME%\include %*
		</echo>
		<echo message="Creating JolieC (Jolie Compiler) Windows launcher script..." />
		<echo file="${dist.launchers.windows}/joliec.bat">@echo off
java -ea:jolie... -ea:joliex... -cp %JOLIE_HOME%\jolie.jar;%JOLIE_HOME%\lib\libjolie.jar;%JOLIE_HOME%\tools\joliec.jar jolie.compiler.Main -l %JOLIE_HOME%\lib;%JOLIE_HOME%\javaServices\*;%JOLIE_HOME%\extensions\* -i %JOLIE_HOME%\include %*
		</echo>

		<echo message="Creating Jolie2Java Windows launcher script..." />
		<echo file="${dist.launchers.windows}/jolie2java.bat">@echo off
java -ea:jolie... -ea:joliex... -cp %JOLIE_HOME%\jolie.jar;%JOLIE_HOME%\lib\libjolie.jar;%JOLIE_HOME%\tools\jolie2java.jar;%JOLIE_HOME%\lib\jolie-gwt.jar joliex.java.Jolie2Java -l %JOLIE_HOME%\lib;%JOLIE_HOME%\javaServices\*;%JOLIE_HOME%\extensions\* -i %JOLIE_HOME%\include %*
		</echo>

		<echo message="Creating Jolie2Surface Windows launcher script..." />
		<echo file="${dist.launchers.windows}/jolie2surface.bat">@echo off
java -ea:jolie... -ea:joliex... -cp %JOLIE_HOME%\jolie.jar;%JOLIE_HOME%\lib\libjolie.jar;%JOLIE_HOME%\tools\jolie2surface.jar joliex.surface.GetSurface -l %JOLIE_HOME%\lib;%JOLIE_HOME%\javaServices\*;%JOLIE_HOME%\extensions\* -i %JOLIE_HOME%\include %*
		</echo>

		<echo message="Creating Jolie2Dummy Windows launcher script..." />
		<echo file="${dist.launchers.windows}/jolie2dummy.bat">@echo off
java -ea:jolie... -ea:joliex... -cp %JOLIE_HOME%\jolie.jar;%JOLIE_HOME%\lib\libjolie.jar;%JOLIE_HOME%\tools\jolie2dummy.jar joliex.dummycreator.JolieDummyCreator -l %JOLIE_HOME%\lib;%JOLIE_HOME%\javaServices\*;%JOLIE_HOME%\extensions\* -i %JOLIE_HOME%\include %*
		</echo>

		<echo message="Creating Jolie2Wsdl Windows launcher script..." />
		<echo file="${dist.launchers.windows}/jolie2wsdl.bat">@echo off
java -ea:jolie... -ea:joliex... -cp %JOLIE_HOME%\jolie.jar;%JOLIE_HOME%\lib\libjolie.jar;%JOLIE_HOME%\tools\jolie2wsdl.jar;%JOLIE_HOME%\lib\wsdl4j.jar joliex.wsdl.Jolie2Wsdl -l %JOLIE_HOME%\lib;%JOLIE_HOME%\javaServices\*;%JOLIE_HOME%\extensions\* -i %JOLIE_HOME%\include %*
		</echo>

		<echo message="Creating JolieDoc (Jolie Documentation tool) Windows launcher script..." />
		<echo file="${dist.launchers.windows}/joliedoc.bat">@echo off
java -ea:jolie... -ea:joliex... -cp %JOLIE_HOME%\jolie.jar;%JOLIE_HOME%\lib\libjolie.jar;%JOLIE_HOME%\tools\joliedoc.jar jolie.doc.JolieDoc -l %JOLIE_HOME%\lib;%JOLIE_HOME%\javaServices\*;%JOLIE_HOME%\extensions\* -i %JOLIE_HOME%\include %*
		</echo>
		<echo message="Creating WSDL2Jolie Windows launcher script..." />
		<echo file="${dist.launchers.windows}/wsdl2jolie.bat">@echo off
jolie %JOLIE_HOME%\tools\wsdl2jolie.ol %*
		</echo>
	</target>

    <target name="-install-unix-launchers" unless="isWindows">
        <echo message="Installing Jolie Unix launcher scripts to ${private.install.launcher_dir} ..." />
        <copy todir="${private.install.launcher_dir}" overwrite="true">
          <fileset dir="${dist.launchers.unix}"/>
        </copy>
        <!-- mode permission is not preserved with copy task. using cp command with preserve mode parameter does not work on mac -->
        <fileset id="launcher.files" dir="${dist.launchers.unix}" includes="**"/>
        <pathconvert property="launcher.filename" pathsep="," refid="launcher.files">
          <map from="${user.dir}/${dist.launchers.unix}/" to=""/>
        </pathconvert>
        <chmod perm="775">
          <fileset dir="${private.install.launcher_dir}" includes="${launcher.filename}"/>
        </chmod>
    </target>

	<target name="-create-unix-launchers" unless="isWindows">
		<echo message="Creating Jolie Unix launcher script..." />
		<echo file="${dist.launchers.unix}/jolie">#!/bin/sh

java -ea:jolie... -ea:joliex... -Djava.rmi.server.codebase=file:/$JOLIE_HOME/extensions/rmi.jar -cp $JOLIE_HOME/lib/libjolie.jar:$JOLIE_HOME/jolie.jar jolie.Jolie -l ./lib/*:$JOLIE_HOME/lib:$JOLIE_HOME/javaServices/*:$JOLIE_HOME/extensions/* -i $JOLIE_HOME/include "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/jolie" perm="a+x"/>

		<echo message="Creating MetaService Unix launcher script..." />
		<echo file="${dist.launchers.unix}/metaservice">#!/bin/sh

METASERVICE=$JOLIE_HOME/include/services/metaservice/metaservice.ol

print_help()
{
	echo "Usage: $0 [location [protocol]]"
	echo -e "\nExamples of valid locations are:"
	echo -e "\tsocket://localhost:9000/ (for a tcp/ip socket)"
	echo -e "\tlocalsocket:/tmp/metaservice_socket (for a local socket)"

	echo -e "\nExamples of valid protocls are:"
	echo -e "\tsodep (a fast and open source binary protocol)"
	echo -e "\tsoap (the SOAP protocol, the standard used by Web Services)"

	echo -e "\nExample of valid invocations:"
	echo -e "\t$0 socket://localhost:9000/"
	echo -e "\t$0 socket://localhost:9100/ soap"

	echo -e "\nPlease refer to http://www.jolie-lang.org/ for a complete list of supported locations and protocols."
	echo -e "MetaService supports all of the locations and protocols provided by the JOLIE language.\n";
}

if [[ $1 = "-h" || $1 = "--help" ]]; then
	print_help
elif [[ $# = 0 ]]; then
	jolie $METASERVICE
elif [[ $# = 1 ]]; then
	jolie -C "MetaServiceLocation=\"$1\"" $METASERVICE
elif [[ $# = 2 ]]; then
	jolie -C "MetaServiceLocation=\"$1\"" -C "MetaServiceProtocol=$2" $METASERVICE
else
	print_help
fi
		</echo>
		<chmod file="${dist.launchers.unix}/metaservice" perm="a+x"/>

		<echo message="Creating Jolie2Plasma Unix launcher script..." />
		<echo file="${dist.launchers.unix}/jolie2plasma">#!/bin/sh
java -cp $JOLIE_HOME/jolie.jar:$JOLIE_HOME/lib/libjolie.jar:$JOLIE_HOME/tools/jolie2plasma.jar joliex.plasma.Jolie2Plasma -l $JOLIE_HOME/lib:$JOLIE_HOME/javaServices/*:$JOLIE_HOME/extensions/* -i $JOLIE_HOME/include "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/jolie2plasma" perm="a+x"/>

		<echo message="Creating Jolie2Wsdl Unix launcher script..." />
		<echo file="${dist.launchers.unix}/jolie2wsdl">#!/bin/sh
java -cp $JOLIE_HOME/jolie.jar:$JOLIE_HOME/lib/libjolie.jar:$JOLIE_HOME/tools/jolie2wsdl.jar:$JOLIE_HOME/lib/wsdl4j.jar joliex.wsdl.Jolie2Wsdl -l $JOLIE_HOME/lib:$JOLIE_HOME/javaServices/*:$JOLIE_HOME/extensions/* -i $JOLIE_HOME/include "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/jolie2wsdl" perm="a+x"/>

		<echo message="Creating WSDL2Jolie Unix launcher script..." />
		<echo file="${dist.launchers.unix}/wsdl2jolie">#!/bin/sh
jolie $JOLIE_HOME/tools/wsdl2jolie.ol "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/wsdl2jolie" perm="a+x"/>
		<echo message="Creating JolieC (Jolie Compiler) Unix launcher script..." />
		<echo file="${dist.launchers.unix}/joliec">#!/bin/sh
java -cp $JOLIE_HOME/jolie.jar:$JOLIE_HOME/lib/libjolie.jar:$JOLIE_HOME/tools/joliec.jar jolie.compiler.Main -l $JOLIE_HOME/lib:$JOLIE_HOME/javaServices/*:$JOLIE_HOME/extensions/* -i $JOLIE_HOME/include "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/joliec" perm="a+x"/>

		<echo message="Creating Jolie2Java Unix launcher script..." />
		<echo file="${dist.launchers.unix}/jolie2java">#!/bin/sh
java -cp $JOLIE_HOME/jolie.jar:$JOLIE_HOME/lib/libjolie.jar:$JOLIE_HOME/lib/jolie-gwt.jar:$JOLIE_HOME/tools/jolie2java.jar joliex.java.Jolie2Java -l $JOLIE_HOME/lib:$JOLIE_HOME/javaServices/*:$JOLIE_HOME/extensions/* -i $JOLIE_HOME/include "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/jolie2java" perm="a+x"/>

		<echo message="Creating JolieDoc (Jolie Documentation Tool) Unix launcher script..." />
		<echo file="${dist.launchers.unix}/joliedoc">#!/bin/sh
java -cp $JOLIE_HOME/jolie.jar:$JOLIE_HOME/lib/libjolie.jar:$JOLIE_HOME/tools/joliedoc.jar jolie.doc.JolieDoc -l $JOLIE_HOME/lib:$JOLIE_HOME/javaServices/*:$JOLIE_HOME/extensions/* -i $JOLIE_HOME/include "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/joliedoc" perm="a+x"/>

		<echo message="Creating Jolie2Dummy (Jolie Dummy Service Generator Tool) Unix launcher script..." />
		<echo file="${dist.launchers.unix}/jolie2dummy">#!/bin/sh
java -cp $JOLIE_HOME/jolie.jar:$JOLIE_HOME/lib/libjolie.jar:$JOLIE_HOME/tools/jolie2dummy.jar joliex.dummycreator.JolieDummyCreator -l $JOLIE_HOME/lib:$JOLIE_HOME/javaServices/*:$JOLIE_HOME/extensions/* -i $JOLIE_HOME/include "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/jolie2dummy" perm="a+x"/>

		<echo message="Creating Jolie2Surface (Jolie Surface Extractor Tool) Unix launcher script..." />
		<echo file="${dist.launchers.unix}/jolie2surface">#!/bin/sh
java -cp $JOLIE_HOME/jolie.jar:$JOLIE_HOME/lib/libjolie.jar:$JOLIE_HOME/tools/jolie2surface.jar joliex.surface.GetSurface -l $JOLIE_HOME/lib:$JOLIE_HOME/javaServices/*:$JOLIE_HOME/extensions/* -i $JOLIE_HOME/include "$@"
		</echo>
		<chmod file="${dist.launchers.unix}/jolie2surface" perm="a+x"/>
	</target>

	<target name="install" depends="-init,-delete-old-dir">
		<mkdir dir="${private.install.dir}"/>
		<mkdir dir="${private.install.launcher_dir}"/>
		<copy todir="${private.install.dir}">
			<fileset dir="${dist.jolie}" />
		</copy>
		<antcall target="-install-unix-launchers" />
		<antcall target="-install-windows-launchers" />
		<echo>
Jolie has been installed.
Please make sure that:
	- the environment variable JOLIE_HOME is set to ${private.install.dir}
	- the directory ${private.install.launcher_dir} is in your environment variable PATH
</echo>
	</target>

	<target name="dist-install" depends="dist,install" />

	<target name="build">
		<antcall target="${dist}"/>
	</target>

	<target name="jar" depends="-init">
		<ant antfile="${project.libjolie}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.xsom}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie-xml}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie-js}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie-ssl}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie-gwt}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie-java}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.auto}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.http}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.https}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.javascript}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.btl2cap}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.rmi}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.soap}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.sodep}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jsonrpc}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.sodeps}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.xmlrpc}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.local}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.localsocket}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.metaservice-java}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.monitorJavaServices}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.coreJavaServices}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie2plasma}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie2dummy}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie2surface}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie2wsdl}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.joliec}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jolie2java}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.joliedoc}/build.xml" inheritall="false" target="jar"/>
		<ant antfile="${project.jtracer}/build.xml" inheritall="false" target="jar"/>
	</target>
	<target name="clean" depends="-init">
		<ant antfile="${project.libjolie}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.xsom}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie-xml}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie-js}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie-ssl}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie-gwt}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie-java}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.auto}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.http}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.https}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.javascript}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.btl2cap}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.rmi}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.soap}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jsonrpc}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.sodep}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.sodeps}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.xmlrpc}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.joliedoc}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie2plasma}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie2dummy}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie2surface}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie2wsdl}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.joliec}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jolie2java}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.localsocket}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.local}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.metaservice-java}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.coreJavaServices}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.monitorJavaServices}/build.xml" inheritall="false" target="clean"/>
		<ant antfile="${project.jtracer}/build.xml" inheritall="false" target="clean"/>
	</target>

	<target name="dist" depends="-init,jar">
		<delete dir="${dist}"/>
		<copy todir="${dist.jolie}" flatten="true">
			<resources>
				<file file="${project.jolie}/dist/jolie.jar"/>
			</resources>
		</copy>
		<copy todir="${dist.jolie}/include">
			<fileset dir="include"/>
		</copy>
		<copy todir="${dist.jolie}/lib" flatten="true">
			<resources>
				<file file="${project.libjolie}/dist/libjolie.jar"/>
				<file file="${project.xsom}/dist/xsom.jar"/>
				<file file="${project.jolie-xml}/dist/jolie-xml.jar"/>
				<file file="${project.jolie-js}/dist/jolie-js.jar"/>
				<file file="${project.jolie-ssl}/dist/jolie-ssl.jar"/>
				<file file="${project.jolie-gwt}/dist/jolie-gwt.jar"/>
				<file file="${project.jolie-java}/dist/jolie-java.jar"/>
				<file file="${project.metaservice-java}/dist/metaservice-java.jar"/>
				<file file="${project.jtracer}/dist/jtracer.jar"/>
			</resources>
		</copy>
		<copy todir="${dist.jolie}/extensions" flatten="true">
			<resources>
				<file file="${project.auto}/dist/auto.jar"/>
				<file file="${project.http}/dist/http.jar"/>
				<file file="${project.https}/dist/https.jar"/>
				<file file="${project.javascript}/dist/javascript.jar"/>
				<file file="${project.btl2cap}/dist/btl2cap.jar"/>
				<file file="${project.rmi}/dist/rmi.jar"/>
				<file file="${project.soap}/dist/soap.jar"/>
				<file file="${project.sodep}/dist/sodep.jar"/>
				<file file="${project.jsonrpc}/dist/jsonrpc.jar"/>
				<file file="${project.sodeps}/dist/sodeps.jar"/>
				<file file="${project.xmlrpc}/dist/xmlrpc.jar"/>
				<file file="${project.localsocket}/dist/localsocket.jar"/>
				<file file="${project.local}/dist/local.jar"/>
			</resources>
		</copy>
		<copy todir="${dist.jolie}/javaServices" flatten="true">
			<resources>
				<file file="${project.coreJavaServices}/dist/coreJavaServices.jar"/>
				<file file="${project.monitorJavaServices}/dist/monitorJavaServices.jar"/>
			</resources>
		</copy>

		<copy todir="${dist.jolie}/tools" flatten="true">
			<resources>
				<file file="${project.jolie2plasma}/dist/jolie2plasma.jar"/>
				<file file="${project.jolie2surface}/dist/jolie2surface.jar"/>
				<file file="${project.jolie2dummy}/dist/jolie2dummy.jar"/>
				<file file="${project.jolie2wsdl}/dist/jolie2wsdl.jar"/>
				<file file="${project.joliec}/dist/joliec.jar"/>
				<file file="${project.jolie2java}/dist/jolie2java.jar"/>
				<file file="${project.joliedoc}/dist/joliedoc.jar"/>
				<file file="${project.wsdl2jolie}/wsdl2jolie.ol"/>
			</resources>
		</copy>

		<copy file="${libs.bluetooth}" tofile="${dist.jolie}/lib/bluetooth.jar"/>
		<copy file="${libs.gwt-servlet}" tofile="${dist.jolie}/lib/gwt-servlet.jar"/>
		<copy file="${libs.javamail.smtp}" tofile="${dist.jolie}/lib/smtp.jar"/>
		<copy file="${libs.javamail.mailapi}" tofile="${dist.jolie}/lib/mailapi.jar"/>
		<copy file="${libs.libmatthew.unix}" tofile="${dist.jolie}/lib/unix.jar"/>
		<copy file="${libs.relaxngDatatype}" tofile="${dist.jolie}/lib/relaxngDatatype.jar"/>
		<copy file="${libs.ini4j}" tofile="${dist.jolie}/lib/ini4j.jar"/>
		<copy file="${libs.json}" tofile="${dist.jolie}/lib/json_simple.jar"/>
		<copy file="${libs.servletapi5}" tofile="${dist.jolie}/lib/servletapi5.jar"/>
		<copy file="${libs.wsdl4j}" tofile="${dist.jolie}/lib/wsdl4j.jar"/>
		<copy file="${libs.smack}" tofile="${dist.jolie}/lib/smack.jar"/>
		<copy file="${libs.smackx}" tofile="${dist.jolie}/lib/smackx.jar"/>
		<copy file="${libs.commons-lang3}" tofile="${dist.jolie}/lib/commons-lang3.jar"/>
		<copy file="${libs.uri-templates}" tofile="${dist.jolie}/lib/uri-templates.jar"/>

		<antcall target="-create-unix-launchers" />
		<antcall target="-create-windows-launchers" />
    </target>

    <target name="-test-unix" unless="isWindows">
    	<exec executable="sh" dir="test">
    		<env key="JOLIE_HOME" file="dist/jolie" />
    		<arg value="../dist/launchers/unix/jolie" />
    		<arg value="test.ol" />
    	</exec>
    </target>

    <target name="-test-windows" if="isWindows">
        <exec executable="cmd" dir="test">
            <env key="JOLIE_HOME" file="dist\jolie" />
            <arg value="/c" />
            <arg value='..\dist\launchers\windows\jolie.bat --charset "utf-8"' />
            <arg value="test.ol" />
        </exec>
    </target>

    <target name="test"><!-- depends="dist"> -->
    	<antcall target="-test-unix" />
		<antcall target="-test-windows" />
    </target>
</project>
